/* The following code was generated by JFlex 1.7.0 */

import java.io.Reader;
// Nota: si lo puedo importar aunque todavia no este creado 
//import source.Parser;  
//import source.ParserVal;  







/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.7.0
 * from the specification file <tt>Lexer.flex</tt>
 */
public class Lexer {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0, 0
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\10\0\1\0\1\63\1\4\1\4\1\4\1\4\22\0\1\63\1\24"+
    "\1\0\1\0\1\0\1\0\1\22\1\0\1\17\1\20\1\14\1\13"+
    "\1\60\1\10\1\6\1\15\1\2\11\1\1\62\1\61\1\25\1\23"+
    "\1\26\2\0\4\5\1\7\1\11\24\5\1\56\1\3\1\57\1\16"+
    "\1\5\1\0\1\41\1\43\1\35\1\42\1\44\1\37\1\50\1\52"+
    "\1\12\1\5\1\53\1\40\1\45\1\36\1\31\1\27\1\5\1\30"+
    "\1\33\1\32\1\34\1\47\1\51\1\46\2\5\1\54\1\21\1\55"+
    "\1\0\6\0\1\4\32\0\1\63\40\0\1\0\2\0\1\0\4\0"+
    "\1\0\1\0\1\0\1\0\1\0\1\0\1\0\1\0\1\0\1\0"+
    "\1\0\2\0\1\0\3\0\1\0\1\0\1\0\4\0\1\0\2\0"+
    "\1\0\4\0\1\0\1\0\1\0\1\0\1\0\1\0\1\0\1\0"+
    "\1\0\1\0\1\0\2\0\1\0\3\0\1\0\1\0\1\0\u1583\0"+
    "\1\63\u097f\0\13\63\35\0\1\4\1\4\5\0\1\63\57\0\1\63"+
    "\u0fa0\0\1\63\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\ud00f\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\2\2\1\3\1\4\1\5\1\6\1\4"+
    "\1\7\1\10\1\11\1\12\1\13\1\14\2\1\1\15"+
    "\1\16\1\17\1\20\13\4\1\21\1\22\1\23\1\24"+
    "\1\25\1\26\1\27\1\0\1\30\1\0\1\31\1\30"+
    "\1\4\1\32\1\33\1\34\1\35\1\36\1\37\1\40"+
    "\1\41\15\4\1\42\5\4\1\0\1\30\1\0\1\43"+
    "\2\4\1\44\21\4\1\2\2\4\1\45\1\4\1\46"+
    "\2\4\1\47\2\4\1\50\1\51\5\4\1\52\1\53"+
    "\1\4\1\54\1\55\5\4\1\56\1\57\2\4\1\60"+
    "\1\61\1\62\1\63\1\64\1\65\1\4\1\66\1\4"+
    "\1\67\1\70";

  private static int [] zzUnpackAction() {
    int [] result = new int[139];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\64\0\150\0\234\0\320\0\u0104\0\u0138\0\64"+
    "\0\u016c\0\64\0\64\0\u01a0\0\64\0\64\0\64\0\u01d4"+
    "\0\u0208\0\u023c\0\u0270\0\u02a4\0\u02d8\0\u030c\0\u0340\0\u0374"+
    "\0\u03a8\0\u03dc\0\u0410\0\u0444\0\u0478\0\u04ac\0\u04e0\0\u0514"+
    "\0\64\0\64\0\64\0\64\0\64\0\64\0\64\0\u0548"+
    "\0\u057c\0\u05b0\0\64\0\u05e4\0\u0618\0\u0104\0\64\0\64"+
    "\0\64\0\64\0\64\0\64\0\64\0\u064c\0\u0680\0\u06b4"+
    "\0\u06e8\0\u071c\0\u0750\0\u0784\0\u07b8\0\u07ec\0\u0820\0\u0854"+
    "\0\u0888\0\u08bc\0\u08f0\0\u0924\0\u0958\0\u098c\0\u09c0\0\u09f4"+
    "\0\u0a28\0\u0a5c\0\u0a90\0\u0104\0\u0ac4\0\u0af8\0\u0104\0\u0b2c"+
    "\0\u0b60\0\u0b94\0\u0bc8\0\u0bfc\0\u0c30\0\u0c64\0\u0c98\0\u0ccc"+
    "\0\u0d00\0\u0d34\0\u0d68\0\u0d9c\0\u0dd0\0\u0e04\0\u0e38\0\u0e6c"+
    "\0\u0a28\0\u0ea0\0\u0ed4\0\u0104\0\u0f08\0\u0104\0\u0f3c\0\u0f70"+
    "\0\u0104\0\u0fa4\0\u0fd8\0\u0104\0\u0104\0\u100c\0\u1040\0\u1074"+
    "\0\u10a8\0\u10dc\0\u0104\0\u0104\0\u1110\0\u0104\0\u0104\0\u1144"+
    "\0\u1178\0\u11ac\0\u11e0\0\u1214\0\u0104\0\u0104\0\u1248\0\u127c"+
    "\0\u0104\0\u0104\0\u0104\0\u0104\0\u0104\0\u0104\0\u12b0\0\u0104"+
    "\0\u12e4\0\u0104\0\u0104";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[139];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\1\3\1\4\1\2\1\5\1\6\1\7\1\6"+
    "\1\10\1\6\1\11\1\12\1\13\1\14\1\15\1\16"+
    "\1\17\1\20\1\21\1\22\1\23\1\24\1\25\1\26"+
    "\1\27\1\6\1\30\1\31\1\6\1\32\1\6\1\33"+
    "\2\6\1\34\1\35\1\36\2\6\1\37\1\6\1\40"+
    "\2\6\1\41\1\42\1\43\1\44\1\45\1\46\1\47"+
    "\1\5\65\0\2\3\1\50\2\0\1\51\1\52\1\0"+
    "\1\53\25\0\1\53\4\0\1\52\20\0\2\54\1\50"+
    "\2\0\1\51\1\52\1\0\1\53\25\0\1\53\4\0"+
    "\1\52\23\0\1\5\56\0\1\5\1\0\2\6\2\0"+
    "\1\6\1\0\1\6\1\0\2\6\14\0\25\6\11\0"+
    "\2\51\62\0\2\6\2\0\1\6\1\0\1\6\1\0"+
    "\2\6\14\0\7\6\1\55\1\56\14\6\25\0\1\57"+
    "\67\0\1\60\64\0\1\61\64\0\1\62\63\0\1\63"+
    "\63\0\1\64\63\0\1\65\41\0\2\6\2\0\1\6"+
    "\1\0\1\6\1\0\2\6\14\0\1\6\1\66\1\6"+
    "\1\67\21\6\11\0\2\6\2\0\1\6\1\0\1\6"+
    "\1\0\2\6\14\0\5\6\1\70\7\6\1\71\7\6"+
    "\11\0\2\6\2\0\1\6\1\0\1\6\1\0\2\6"+
    "\14\0\1\6\1\72\23\6\11\0\2\6\2\0\1\6"+
    "\1\0\1\6\1\0\2\6\14\0\3\6\1\73\2\6"+
    "\1\74\13\6\1\75\2\6\11\0\2\6\2\0\1\6"+
    "\1\0\1\6\1\0\2\6\14\0\2\6\1\76\7\6"+
    "\1\77\12\6\11\0\2\6\2\0\1\6\1\0\1\6"+
    "\1\0\2\6\14\0\5\6\1\100\3\6\1\101\1\102"+
    "\12\6\11\0\2\6\2\0\1\6\1\0\1\6\1\0"+
    "\2\6\14\0\2\6\1\103\12\6\1\104\7\6\11\0"+
    "\2\6\2\0\1\6\1\0\1\6\1\0\2\6\14\0"+
    "\1\6\1\105\23\6\11\0\2\6\2\0\1\6\1\0"+
    "\1\6\1\0\2\6\14\0\11\6\1\106\13\6\11\0"+
    "\2\6\2\0\1\6\1\0\1\6\1\0\2\6\14\0"+
    "\2\6\1\107\22\6\11\0\2\6\2\0\1\6\1\0"+
    "\1\6\1\0\2\6\14\0\23\6\1\110\1\6\10\0"+
    "\4\111\1\0\57\111\1\0\2\51\4\0\1\52\1\0"+
    "\1\53\25\0\1\53\4\0\1\52\20\0\2\112\5\0"+
    "\1\113\2\0\1\113\51\0\2\54\3\0\1\51\1\52"+
    "\1\0\1\53\25\0\1\53\4\0\1\52\20\0\2\6"+
    "\2\0\1\6\1\0\1\6\1\0\2\6\14\0\3\6"+
    "\1\114\21\6\11\0\2\6\2\0\1\6\1\0\1\6"+
    "\1\0\1\6\1\115\14\0\2\6\1\116\22\6\11\0"+
    "\2\6\2\0\1\6\1\0\1\6\1\0\2\6\14\0"+
    "\1\6\1\117\23\6\11\0\2\6\2\0\1\6\1\0"+
    "\1\6\1\0\2\6\14\0\7\6\1\120\15\6\11\0"+
    "\2\6\2\0\1\6\1\0\1\6\1\0\2\6\14\0"+
    "\3\6\1\121\21\6\11\0\2\6\2\0\1\6\1\0"+
    "\1\6\1\0\2\6\14\0\5\6\1\122\17\6\11\0"+
    "\2\6\2\0\1\6\1\0\1\6\1\0\2\6\14\0"+
    "\1\6\1\123\23\6\11\0\2\6\2\0\1\6\1\0"+
    "\1\6\1\0\2\6\14\0\12\6\1\124\12\6\11\0"+
    "\2\6\2\0\1\6\1\0\1\6\1\0\1\6\1\125"+
    "\14\0\25\6\11\0\2\6\2\0\1\6\1\0\1\6"+
    "\1\0\2\6\14\0\16\6\1\126\6\6\11\0\2\6"+
    "\2\0\1\6\1\0\1\6\1\0\2\6\14\0\4\6"+
    "\1\127\20\6\11\0\2\6\2\0\1\6\1\0\1\6"+
    "\1\0\2\6\14\0\7\6\1\130\15\6\11\0\2\6"+
    "\2\0\1\6\1\0\1\6\1\0\2\6\14\0\2\6"+
    "\1\131\22\6\11\0\2\6\2\0\1\6\1\0\1\6"+
    "\1\0\2\6\14\0\11\6\1\132\13\6\11\0\2\6"+
    "\2\0\1\6\1\0\1\6\1\0\2\6\14\0\5\6"+
    "\1\133\17\6\11\0\2\6\2\0\1\6\1\0\1\6"+
    "\1\0\2\6\14\0\10\6\1\134\14\6\11\0\2\6"+
    "\2\0\1\6\1\0\1\6\1\0\2\6\14\0\15\6"+
    "\1\135\7\6\11\0\2\6\2\0\1\6\1\0\1\6"+
    "\1\0\2\6\14\0\4\6\1\136\20\6\11\0\2\6"+
    "\2\0\1\6\1\0\1\6\1\0\1\6\1\137\14\0"+
    "\25\6\11\0\2\6\2\0\1\6\1\0\1\6\1\0"+
    "\1\6\1\140\14\0\25\6\11\0\2\141\62\0\2\112"+
    "\6\0\1\53\25\0\1\53\25\0\2\112\62\0\2\6"+
    "\2\0\1\6\1\0\1\6\1\0\2\6\14\0\7\6"+
    "\1\142\15\6\11\0\2\6\2\0\1\6\1\0\1\6"+
    "\1\0\2\6\14\0\3\6\1\143\21\6\11\0\2\6"+
    "\2\0\1\6\1\0\1\6\1\0\2\6\14\0\15\6"+
    "\1\144\7\6\11\0\2\6\2\0\1\6\1\0\1\6"+
    "\1\0\2\6\14\0\5\6\1\145\17\6\11\0\2\6"+
    "\2\0\1\6\1\0\1\6\1\0\2\6\14\0\15\6"+
    "\1\146\7\6\11\0\2\6\2\0\1\6\1\0\1\6"+
    "\1\0\1\6\1\147\14\0\5\6\1\150\17\6\11\0"+
    "\2\6\2\0\1\6\1\0\1\6\1\0\2\6\14\0"+
    "\7\6\1\151\15\6\11\0\2\6\2\0\1\6\1\0"+
    "\1\6\1\0\2\6\14\0\3\6\1\152\21\6\11\0"+
    "\2\6\2\0\1\6\1\0\1\6\1\0\2\6\14\0"+
    "\1\153\24\6\11\0\2\6\2\0\1\6\1\0\1\6"+
    "\1\0\2\6\14\0\15\6\1\154\7\6\11\0\2\6"+
    "\2\0\1\6\1\0\1\6\1\0\2\6\14\0\6\6"+
    "\1\155\16\6\11\0\2\6\2\0\1\6\1\0\1\6"+
    "\1\0\2\6\14\0\12\6\1\156\12\6\11\0\2\6"+
    "\2\0\1\6\1\0\1\6\1\0\2\6\14\0\4\6"+
    "\1\157\20\6\11\0\2\6\2\0\1\6\1\0\1\6"+
    "\1\0\2\6\14\0\14\6\1\160\10\6\11\0\2\6"+
    "\2\0\1\6\1\0\1\6\1\0\2\6\14\0\12\6"+
    "\1\161\12\6\11\0\2\6\2\0\1\6\1\0\1\6"+
    "\1\0\2\6\14\0\12\6\1\162\12\6\11\0\2\6"+
    "\2\0\1\6\1\0\1\6\1\0\2\6\14\0\15\6"+
    "\1\163\7\6\11\0\2\6\2\0\1\6\1\0\1\6"+
    "\1\0\2\6\14\0\13\6\1\164\11\6\11\0\2\6"+
    "\2\0\1\6\1\0\1\6\1\0\2\6\14\0\11\6"+
    "\1\165\13\6\11\0\2\6\2\0\1\6\1\0\1\6"+
    "\1\0\2\6\14\0\3\6\1\166\21\6\11\0\2\6"+
    "\2\0\1\6\1\0\1\6\1\0\2\6\14\0\2\6"+
    "\1\167\22\6\11\0\2\6\2\0\1\6\1\0\1\6"+
    "\1\0\2\6\14\0\1\6\1\170\23\6\11\0\2\6"+
    "\2\0\1\6\1\0\1\6\1\0\2\6\14\0\7\6"+
    "\1\171\15\6\11\0\2\6\2\0\1\6\1\0\1\6"+
    "\1\0\2\6\14\0\6\6\1\172\16\6\11\0\2\6"+
    "\2\0\1\6\1\0\1\6\1\0\2\6\14\0\6\6"+
    "\1\173\16\6\11\0\2\6\2\0\1\6\1\0\1\6"+
    "\1\0\2\6\14\0\11\6\1\174\13\6\11\0\2\6"+
    "\2\0\1\6\1\0\1\6\1\0\2\6\14\0\3\6"+
    "\1\175\21\6\11\0\2\6\2\0\1\6\1\0\1\6"+
    "\1\0\2\6\14\0\15\6\1\176\7\6\11\0\2\6"+
    "\2\0\1\6\1\0\1\6\1\0\2\6\14\0\11\6"+
    "\1\177\13\6\11\0\2\6\2\0\1\6\1\0\1\6"+
    "\1\0\2\6\14\0\5\6\1\200\17\6\11\0\2\6"+
    "\2\0\1\6\1\0\1\6\1\0\2\6\14\0\24\6"+
    "\1\201\11\0\2\6\2\0\1\6\1\0\1\6\1\0"+
    "\2\6\14\0\15\6\1\202\7\6\11\0\2\6\2\0"+
    "\1\6\1\0\1\6\1\0\2\6\14\0\7\6\1\203"+
    "\15\6\11\0\2\6\2\0\1\6\1\0\1\6\1\0"+
    "\2\6\14\0\21\6\1\204\3\6\11\0\2\6\2\0"+
    "\1\6\1\0\1\6\1\0\2\6\14\0\3\6\1\205"+
    "\21\6\11\0\2\6\2\0\1\6\1\0\1\6\1\0"+
    "\2\6\14\0\23\6\1\206\1\6\11\0\2\6\2\0"+
    "\1\6\1\0\1\6\1\0\2\6\14\0\15\6\1\207"+
    "\7\6\11\0\2\6\2\0\1\6\1\0\1\6\1\0"+
    "\2\6\14\0\15\6\1\210\7\6\11\0\2\6\2\0"+
    "\1\6\1\0\1\6\1\0\2\6\14\0\11\6\1\211"+
    "\13\6\11\0\2\6\2\0\1\6\1\0\1\6\1\0"+
    "\2\6\14\0\17\6\1\212\5\6\11\0\2\6\2\0"+
    "\1\6\1\0\1\6\1\0\2\6\14\0\3\6\1\213"+
    "\21\6\10\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[4888];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\1\11\5\1\1\11\1\1\2\11\1\1\3\11"+
    "\21\1\7\11\1\0\1\1\1\0\1\11\3\1\7\11"+
    "\23\1\1\0\1\1\1\0\100\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[139];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true iff the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true iff the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;
  
  /** 
   * The number of occupied positions in zzBuffer beyond zzEndRead.
   * When a lead/high surrogate has been read from the input stream
   * into the final zzBuffer position, this will have a value of 1;
   * otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /* user code: */
   
    private Parser parser;  // Instancia del parser 

   // constructor de lexer
    public Lexer(Reader r, Parser parser) {
        this(r);  
        this.parser = parser;  // Asigna el parser a la variable de instancia
    }
 



  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public Lexer(java.io.Reader in) {
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x110000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 298) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzBuffer.length*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      throw new java.io.IOException("Reader returned 0 characters. See JFlex examples for workaround.");
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      /* If numRead == requested, we might have requested to few chars to
         encode a full Unicode character. We assume that a Reader would
         otherwise never return half characters. */
      if (numRead == requested) {
        if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    zzFinalHighSurrogate = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE)
      zzBuffer = new char[ZZ_BUFFERSIZE];
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public int yylex() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
              {
                return -1;
              }
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { System.err.println("Error léxico: " + yytext());
            } 
            // fall through
          case 57: break;
          case 2: 
            { // Convierte el texto del token a un valor double
	 double value = Double.parseDouble(yytext());
        /// setValor es un metodo que se usa para asignar el valor semantico del token que se acaba de leer 
        /// ParserVal es una clase auxiliar para guardar informacion , enteros ,double, string u objetos 
     parser.setValor(new ParserVal(value));
    return Parser.LITERAL_ENTERA;  // Retorna el token NUMERO, indicando que es un número
    //return Parser.LITERAL_DOBLE;
            } 
            // fall through
          case 58: break;
          case 3: 
            { 
            } 
            // fall through
          case 59: break;
          case 4: 
            { String valor =yytext();
            parser.setValor(new ParserVal(valor));
            return Parser.ID ;
            } 
            // fall through
          case 60: break;
          case 5: 
            { return Parser.PUNTO;
            } 
            // fall through
          case 61: break;
          case 6: 
            { return Parser.RESTA;
            } 
            // fall through
          case 62: break;
          case 7: 
            { return Parser.SUMA;
            } 
            // fall through
          case 63: break;
          case 8: 
            { return Parser.MULTI;
            } 
            // fall through
          case 64: break;
          case 9: 
            { return Parser.DIVI;
            } 
            // fall through
          case 65: break;
          case 10: 
            { return Parser.POTE;
            } 
            // fall through
          case 66: break;
          case 11: 
            { return Parser.LPAR;
            } 
            // fall through
          case 67: break;
          case 12: 
            { return Parser.RPAR;
            } 
            // fall through
          case 68: break;
          case 13: 
            { return Parser.ASIG;
            } 
            // fall through
          case 69: break;
          case 14: 
            { return Parser.NEG;
            } 
            // fall through
          case 70: break;
          case 15: 
            { return Parser.MENORQUE;
            } 
            // fall through
          case 71: break;
          case 16: 
            { return Parser.MAYORQUE;
            } 
            // fall through
          case 72: break;
          case 17: 
            { return Parser.LLLAVE;
            } 
            // fall through
          case 73: break;
          case 18: 
            { return Parser.RLLAVE;
            } 
            // fall through
          case 74: break;
          case 19: 
            { return Parser.LCORCHETE;
            } 
            // fall through
          case 75: break;
          case 20: 
            { return Parser.RCORCHETE;
            } 
            // fall through
          case 76: break;
          case 21: 
            { return Parser.COMA;
            } 
            // fall through
          case 77: break;
          case 22: 
            { return Parser.SEMICOLON;
            } 
            // fall through
          case 78: break;
          case 23: 
            { return Parser.COLON;
            } 
            // fall through
          case 79: break;
          case 24: 
            { // Convierte el texto del token a un valor double
	 double value = Double.parseDouble(yytext());
        /// setValor es un metodo que se usa para asignar el valor semantico del token que se acaba de leer 
        /// ParserVal es una clase auxiliar para guardar informacion , enteros ,double, string u objetos 
     parser.setValor(new ParserVal(value));
    return Parser.LITERAL_ENTERA;  // Retorna el token NUMERO, indicando que es un número
            } 
            // fall through
          case 80: break;
          case 25: 
            { // Convierte el texto del token a un valor double
	 double value = Double.parseDouble(yytext());
        /// setValor es un metodo que se usa para asignar el valor semantico del token que se acaba de leer 
        /// ParserVal es una clase auxiliar para guardar informacion , enteros ,double, string u objetos 
     parser.setValor(new ParserVal(value));
    //return Parser.LITERAL_FLOTANTE;  // Retorna el token NUMERO, indicando que es un número
    return Parser.LITERAL_ENTERA;
            } 
            // fall through
          case 81: break;
          case 26: 
            { return Parser.IF;
            } 
            // fall through
          case 82: break;
          case 27: 
            { return Parser.DIVISIONENTERA;
            } 
            // fall through
          case 83: break;
          case 28: 
            { return Parser.OR;
            } 
            // fall through
          case 84: break;
          case 29: 
            { return Parser.AND;
            } 
            // fall through
          case 85: break;
          case 30: 
            { return Parser.IGUAL;
            } 
            // fall through
          case 86: break;
          case 31: 
            { return Parser.DESIGUAL;
            } 
            // fall through
          case 87: break;
          case 32: 
            { return Parser.MENORIGUAL;
            } 
            // fall through
          case 88: break;
          case 33: 
            { return Parser.MAYORIGUAL;
            } 
            // fall through
          case 89: break;
          case 34: 
            { return Parser.DO;
            } 
            // fall through
          case 90: break;
          case 35: 
            { return Parser.INT;
            } 
            // fall through
          case 91: break;
          case 36: 
            { return Parser.PTR;
            } 
            // fall through
          case 92: break;
          case 37: 
            { return Parser.RUNE;
            } 
            // fall through
          case 93: break;
          case 38: 
            { return Parser.TRUE;
            } 
            // fall through
          case 94: break;
          case 39: 
            { return Parser.SCAN;
            } 
            // fall through
          case 95: break;
          case 40: 
            { return Parser.CASE;
            } 
            // fall through
          case 96: break;
          case 41: 
            { return Parser.FUNC;
            } 
            // fall through
          case 97: break;
          case 42: 
            { return Parser.ELSE;
            } 
            // fall through
          case 98: break;
          case 43: 
            { return Parser.VOID;
            } 
            // fall through
          case 99: break;
          case 44: 
            { return Parser.PRINT;
            } 
            // fall through
          case 100: break;
          case 45: 
            { return Parser.PROTO;
            } 
            // fall through
          case 101: break;
          case 46: 
            { return Parser.FLOAT;
            } 
            // fall through
          case 102: break;
          case 47: 
            { return Parser.FALSE;
            } 
            // fall through
          case 103: break;
          case 48: 
            { return Parser.BREAK;
            } 
            // fall through
          case 104: break;
          case 49: 
            { return Parser.WHILE;
            } 
            // fall through
          case 105: break;
          case 50: 
            { return Parser.RETURN;
            } 
            // fall through
          case 106: break;
          case 51: 
            { return Parser.STRING;
            } 
            // fall through
          case 107: break;
          case 52: 
            { return Parser.STRUCT;
            } 
            // fall through
          case 108: break;
          case 53: 
            { return Parser.SWITCH;
            } 
            // fall through
          case 109: break;
          case 54: 
            { return Parser.DOUBLE;
            } 
            // fall through
          case 110: break;
          case 55: 
            { return Parser.COMPLEX;
            } 
            // fall through
          case 111: break;
          case 56: 
            { return Parser.DEFAULT;
            } 
            // fall through
          case 112: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }

  /**
   * Runs the scanner on input files.
   *
   * This is a standalone scanner, it will print any unmatched
   * text to System.out unchanged.
   *
   * @param argv   the command line, contains the filenames to run
   *               the scanner on.
   */
  public static void main(String argv[]) {
    if (argv.length == 0) {
      System.out.println("Usage : java Lexer [ --encoding <name> ] <inputfile(s)>");
    }
    else {
      int firstFilePos = 0;
      String encodingName = "UTF-8";
      if (argv[0].equals("--encoding")) {
        firstFilePos = 2;
        encodingName = argv[1];
        try {
          java.nio.charset.Charset.forName(encodingName); // Side-effect: is encodingName valid? 
        } catch (Exception e) {
          System.out.println("Invalid encoding '" + encodingName + "'");
          return;
        }
      }
      for (int i = firstFilePos; i < argv.length; i++) {
        Lexer scanner = null;
        try {
          java.io.FileInputStream stream = new java.io.FileInputStream(argv[i]);
          java.io.Reader reader = new java.io.InputStreamReader(stream, encodingName);
          scanner = new Lexer(reader);
          while ( !scanner.zzAtEOF ) scanner.yylex();
        }
        catch (java.io.FileNotFoundException e) {
          System.out.println("File not found : \""+argv[i]+"\"");
        }
        catch (java.io.IOException e) {
          System.out.println("IO error scanning file \""+argv[i]+"\"");
          System.out.println(e);
        }
        catch (Exception e) {
          System.out.println("Unexpected exception:");
          e.printStackTrace();
        }
      }
    }
  }


}
